Binary file ./.file_operations.py.swp matches
./ARCHIVED_STUFF/aws/aws_class.py:23:def force_symlink(file1, file2):
./ARCHIVED_STUFF/aws/aws_class.py:38:    def __init__(self):
./ARCHIVED_STUFF/aws/aws_class.py:51:    def job_info_batch(self, job_id):
./ARCHIVED_STUFF/aws/aws_class.py:89:    def cancel_job(self, job_id, reason="N/A"):
./ARCHIVED_STUFF/aws/aws_class.py:101:    def cancel_jobs(self, job_id_list):
./ARCHIVED_STUFF/aws/aws_class.py:109:    def list_jobs(self, queue="small"):
./ARCHIVED_STUFF/aws/aws_class.py:150:    def submit_job(self, path=None, queue="test", cpus="default", copy_PythonModules=True):
./ARCHIVED_STUFF/aws/aws_class.py:195:            if cpus == "default":
./ARCHIVED_STUFF/aws/aws_class.py:262:    def __init__(self):
./ARCHIVED_STUFF/aws/aws_class.py:277:    def create_symlinks(self):
./ARCHIVED_STUFF/aws/aws_class.py:305:    def create_symlink(self, path=None):
./ARCHIVED_STUFF/aws/aws_class.py:310:        # def force_symlink(file1, file2):
./ARCHIVED_STUFF/aws/aws_class.py:343:    def __init__(self, system="sherlock"):
./ARCHIVED_STUFF/aws/aws_class.py:359:    def create_symlinks(self):
./ARCHIVED_STUFF/aws/aws_class.py:366:        def force_symlink(file1, file2):
./ARCHIVED_STUFF/aws/aws_class.py:398:# def list_jobs(self, status="RUNNING", queue="small"):
Binary file ./ARCHIVED_STUFF/aws/aws_class.pyc matches
./ARCHIVED_STUFF/classical_methods/lennard_jones.py:18:def lennard_jones_sp(
./ARCHIVED_STUFF/classical_methods/lennard_jones.py:115:def repeat_unit_cell_ASAP(atoms, sigma):
./ARCHIVED_STUFF/classical_methods/lennard_jones.py:123:    def calc_cell_heights(unit_cell):
./ARCHIVED_STUFF/docs/ase_modules/dft_job_automat.rst:8:is how to define a CO molecule
./ARCHIVED_STUFF/docs/ase_modules/tmp_dft_job_automat0:9:is how to define a CO molecule::
./ARCHIVED_STUFF/docs/conf.py:96:# so a file named "default.css" will overwrite the builtin "default.css".
./ARCHIVED_STUFF/docs/conf.py:102:# The default sidebars (for documents that don't match any pattern) are
./ARCHIVED_STUFF/docs/conf.py:103:# defined by theme itself.  Builtin themes are using these templates by
./ARCHIVED_STUFF/docs/conf.py:104:# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
./ARCHIVED_STUFF/energetics/dft_energy.py:22:    def __init__(self,
./ARCHIVED_STUFF/energetics/dft_energy.py:77:    def __str__(self):
./ARCHIVED_STUFF/energetics/dft_energy.py:87:    def __repr__(self):
./ARCHIVED_STUFF/energetics/dft_energy.py:97:    def __sub__(self, other):
./ARCHIVED_STUFF/energetics/dft_energy.py:102:        def subtract_mine(a, b):
./ARCHIVED_STUFF/energetics/dft_energy.py:171:    def __add__(self, other):
./ARCHIVED_STUFF/energetics/dft_energy.py:178:    def __truediv__(self, other):
./ARCHIVED_STUFF/energetics/dft_energy.py:209:    def __floordiv__(self, other):
./ARCHIVED_STUFF/energetics/dft_energy.py:220:    def add_entries(entries_list):
./ARCHIVED_STUFF/energetics/dft_energy.py:240:    def calc_internal_energy(self):
./ARCHIVED_STUFF/energetics/dft_energy.py:261:    def calc_enthalpy_energy(self):
./ARCHIVED_STUFF/energetics/dft_energy.py:275:    def calc_gibbs_free_energy(self):
./ARCHIVED_STUFF/energetics/dft_energy.py:315:    def __init__(self,
./ARCHIVED_STUFF/energetics/dft_energy.py:405:    def calc_ref_energies(self):
./ARCHIVED_STUFF/energetics/formation_energy.py:14:def calc_formation_energy(
./ARCHIVED_STUFF/energetics/formation_energy.py:48:    # | - Finding List of Unique Elements Defined by reference_states list
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:17:def get_modes_from_OUTCAR(outcar_fh, nat=None, free_nat=None, path_i="."):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:81:def parse_env_params(params):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:93:def parse_poscar(poscar_fh, cons_atoms=0):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:146:def MAT_m_VEC(m, v):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:155:def T(m):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:161:def get_epsilon_from_OUTCAR(outcar_fh):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:186:def parse_freqdat(freqdat_fh, nat):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:199:def parse_modesdat(modesdat_fh, nat):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:224:def modes_list(num_modes, step, mode_0=1, modes_to_run="All"):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:271:def vasp_raman_input_file(modes, dir="."):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:294:def concatenate_mode_files():
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:302:def to_plot(hw, ab, gam=0.05, type="Gaussian", scaling=1.):
./ARCHIVED_STUFF/old.raman_dft/vasp_raman_job_methods.py:336:def proc_data(
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:33:    def __init__(self,
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:43:    def tmp_meth(self,
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:55:def get_g_ooh(m_ooh, b_ooh, g_oh):
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:63:def get_g_o(m_o, b_o, g_oh):
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:71:def get_g_oh(m_oh, b_oh, g_oh):
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:79:def lim_U_i(
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:173:# def lim_U_o2_to_ooh(g_oh,
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:218:# def lim_U_ooh_to_o(g_oh,
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:259:# def lim_U_o_to_oh(g_oh,
./ARCHIVED_STUFF/oxr_reaction/adsorbate_scaling.py:299:# def lim_U_oh_to_h2o(g_oh,
./ARCHIVED_STUFF/oxr_reaction/oxr_methods.py:21:def plotly_fed_layout(
./ARCHIVED_STUFF/oxr_reaction/oxr_methods.py:91:def calc_ads_e(
./ARCHIVED_STUFF/oxr_reaction/oxr_methods.py:102:    Default oxygen reference energy is based on water
./ARCHIVED_STUFF/oxr_reaction/oxr_methods.py:169:def df_calc_adsorption_e(
./ARCHIVED_STUFF/oxr_reaction/oxr_methods.py:263:def lowest_e_path(
./ARCHIVED_STUFF/oxr_reaction/oxr_methods.py:443:def plot_all_states(
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:39:    def __init__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:79:    def __create_contour_trace__(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:176:    def __create_data_point_traces__(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:182:        # | - Default Smart Format Dict
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:233:    def __create_scatter_trace_i__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:304:    def ooh_oh_scaling(self, doh):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:334:    def overpotential3(self, x, doh):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_2d_volcano.py:354:    def get_plotly_layout(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:38:    def __init__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:89:    def create_fed_plot(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:117:    def ideal_ORR_series(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:161:    def create_rxn_coord_array(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:176:                Spacing inbetween the energy levels. The default of 0 creates
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:196:    def plot_fed_series(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:290:    def __create_plotly_series__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:622:    def __convert_to_plotting_list__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:651:    def max_y_value_per_step(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:676:    def H_e_pairs_annotations(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:690:        def add_annot(
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:772:    def create_mid_state_x_array(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_fed.py:792:    def get_plotly_layout(self, layout_dict=None):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:36:    def __init__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:111:    def create_scaling_relations_plot(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:122:        # | - Default Smart Format Dict
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:209:    def __create_smart_format_dict__(self, property_dict, smart_format_dict):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:227:    def __create_series_name__(self, series_i):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:241:    def __create_trace_i__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:282:    def __series_excluded__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:326:    def fit_scaling_lines(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:482:    def add_ideal_lines(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:507:    def add_line(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:530:        def scaling_meth(E_OH):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:582:    def get_plotly_layout(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:749:    # def __ideal_ooh_oh_scaling__(self, E_OH):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:759:    # def __ideal_h_oh_scaling__(self, E_OH):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_scaling.py:769:    # def __ideal_oh_oh_scaling__(self, E_OH):
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_volcano.py:35:    def __init__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_volcano.py:75:    def create_volcano_relations_plot(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_volcano.py:87:        # | - Default Smart Format Dict
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_volcano.py:184:    def create_volcano_lines(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_volcano.py:363:    def __create_trace_i__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_plotting_classes/oxr_plot_volcano.py:438:    def get_plotly_layout(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_rxn.py:37:    def __init__(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_rxn.py:141:    def __create_series_name__(self, series_i):
./ARCHIVED_STUFF/oxr_reaction/oxr_rxn.py:162:    def __create_smart_format_dict__(self, property_dict, smart_format_dict):
./ARCHIVED_STUFF/oxr_reaction/oxr_rxn.py:183:    def add_series(
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:34:    def __init__(
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:167:    def __fill_nan_values__(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:196:    def __num_of_states__(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:220:    def __energy_states_dict__(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:235:    def __create_property_dict__(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:241:        def all_same_val(df_i, prop_i, val_1):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:280:    def add_bulk_entry(self,
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:307:    def rxn_energy_lst_h2o2(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:339:    def property_list(self, column_name):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:362:    def fill_missing_data(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:383:    def rxn_energy_lst(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:453:    def rxn_energy_lst_new(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:497:    def apply_bias(self, bias, energy_list):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:520:    def calc_overpotential(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:557:    def calc_overpotential_OER(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:577:    def calc_overpotential_h2o2(self):
./ARCHIVED_STUFF/oxr_reaction/oxr_series.py:601:    def __series_plot_name__(self,
./ARCHIVED_STUFF/pourbaix_pymatgen/data_exp_form_e.py:3:def formation_e_data_dict():
./ARCHIVED_STUFF/pourbaix_pymatgen/data_exp_form_e.py:59:def get_entry(chemical_formula_list, data_dict):
./ARCHIVED_STUFF/pourbaix_pymatgen/data_exp_form_e.py:83:def oxygen_stoich(exp_entry):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:5:	By default the first list created is in order of atomic number
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:10:	def __init__(self, atom_num_lst=[[]]):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:16:	def mk_lst_atnum(self):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:33:	def mk_lst_trans_met(self):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:56:	def __init__(self,elem_lst):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:59:	def sort(self,srt_type='group_num'):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:64:			DEFAULT: group_num, sorts by group number with lowest group number first, and
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:82:	def remove(self,element):
./ARCHIVED_STUFF/pourbaix_pymatgen/element_list.py:113:def elem_str_mke(elem_lst):
./ARCHIVED_STUFF/pourbaix_pymatgen/energy_scheme.py:1:def ref_atoms_dict():
./ARCHIVED_STUFF/pourbaix_pymatgen/energy_scheme.py:58:def h2o_energy():
./ARCHIVED_STUFF/pourbaix_pymatgen/energy_scheme.py:71:def form_e_all_oxides(element, only_pd_entries=False):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:10:def get_entries_MP(material_name):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:24:def get_entry_MP(entry_s):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:48:def norm_e(entry, correction=True):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:53:		correction: Apply default MP corrections
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:68:def return_entry(entry_list, entryid):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:92:def entry_remove(entries, entry_to_remove):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:117:def base_atom(entries):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:154:def pure_atoms_remove(entries):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:156:	Removes entries corresponding to pure atoms, defined as entries with one
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:182:def pure_atoms_return(entries):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:220:def alloy_entries(entries):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:255:def contains_element(entries,element_symbol):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:278:def number_of_elem_in_entry(entry,element):
./ARCHIVED_STUFF/pourbaix_pymatgen/entry_methods.py:291:def element_formula_list(entry):
./ARCHIVED_STUFF/pourbaix_pymatgen/find_closest_point_pd.py:1:def find_closest_point_pd(pourbaix_diagram_object):
./ARCHIVED_STUFF/pourbaix_pymatgen/find_closest_point_pd.py:18:	def screening_check_desirable(entry,criteria='only-solid'):
./ARCHIVED_STUFF/pourbaix_pymatgen/find_closest_point_pd.py:33:	def get_water_stability_lines(limits):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:13:def process(i,j,comp=0.5, heat_map_scale='Pt_ref', pt_oxid_V=0.6470339):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:22:		comp: Composition loading of the two elements (default is 0.5)
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:41:def process_alloy(i,j):	# Deprecated *******************************************
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:90:def construct_output_matrix(elem):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:110:def finish_symmetric_matrix(elem, output_lst):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:138:def run_all_binary_combinations(elements, loop_funct, scale, pt_oxid_V=0.6470339):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:171:def oxidation_dissolution_product_0(i, j, scale):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:218:def ref_atoms(i,j, scale):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:242:	def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:246:	def __call__(self, value, clip=None):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:253:def extract_data_from_matrix(output_lst):
./ARCHIVED_STUFF/pourbaix_pymatgen/heat_map.py:276:def plot_heat_map(data_matrix, elem, text_overlay=None, composition=False,
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:3:def entry_data(mtnme_1, mtnme_2, direct_0, mprester_key):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:67:def remove_duplicate_entries(entry_list):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:71:    def contains_entry(entry_list, ent):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:96:def aq_correction(entries):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:108:    def contains_entry(entry_list, ent):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:137:def stable_entr(entries_aqcorr):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:160:def form_e(stable_solids_minus_h2o, entries_aqcorr, gas_gibbs=True):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:191:    def form_energy(entry, solid_ref_energy_dict, gas_gibbs=True):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:243:def ref_entry_find(stable_solids_minus_h2o, ref_state):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:252:    #Chk# Ion solid material reference state (defined by the dict 'Reference Solid' entry in ion_dict)
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:266:def ref_entry_stoich(ref_entry):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_make.py:274:def mke_pour_ion_entr(mtnme, ion_dict, stable_solids_minus_h2o, ref_state, entries_aqcorr, ref_dict):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:1:def ORR_line(pH):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:12:def stable_mat_one_elem(pH,V,mat):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:48:def plot_reg(coord_data):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:66:def phase_coord(entries, atom_comp, prim_elem=False):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:77:			prim_elem is left to its default
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:113:def phase_filter(phase_coord,phase_type):
./ARCHIVED_STUFF/pourbaix_pymatgen/pd_screen_tools.py:169:def is_solid_phase(mat1, mat2, mat1_co=0.5):
./ARCHIVED_STUFF/pourbaix_pymatgen/pourdiag.py:4:def pd_entries(mtnme_1,mtnme_2):
./ARCHIVED_STUFF/pourbaix_pymatgen/read_coord_data.py:1:def read_coord_data(elem_1,elem_2, mat1_co=0.5):
./ARCHIVED_STUFF/pourbaix_pymatgen/save_data.py:1:def save_data(data,file_name):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:4:def most_stable_phase(phase_regions,pH=None, scale='RHE', pt_oxid_V=0.6470339):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:116:def oxidation_dissolution_product(phase_regions_all, most_stable_phase):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:186:	def format_to_point_pairs(line_segment):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:194:	def compare_points(point_0, point_1, rounding):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:217:	def make_unique(original_list):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:222:	def binary_region_entries(region):
./ARCHIVED_STUFF/pourbaix_pymatgen/stability_crit.py:248:def is_nonox_phase(phase_regions):
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:44:def calc_lennard_jones_form_e(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:110:def calc_lennard_jones_all_atoms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:179:def objective(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:227:    def calc_sum_of_normals_of_forces(forces):
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:304:def flatten_eps_sig_triangular_matrices(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:341:def unflatten_eps_sig_array(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:380:    def unflatten_tri_matrix_with_defined_cross_terms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:385:        """Convert array into a diagonal matrix with defined lower cross-terms.
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:395:        # | - unflatten_tri_matrix_with_defined_cross_terms
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:437:    def unflatten_single_triangular_matrix(flat_array, N):
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:481:        epsilon = unflatten_tri_matrix_with_defined_cross_terms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:487:        sigma = unflatten_tri_matrix_with_defined_cross_terms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:509:def fit_LJ_to_DFT(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:613:def calc_MSE(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/lj_regression.py:648:def k_fold_cross_validation(data, k=5):
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:42:def calc_lennard_jones_form_e(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:108:def calc_lennard_jones_all_atoms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:180:def objective(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:223:    def calc_sum_of_normals_of_forces(forces):
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:285:def flatten_eps_sig_triangular_matrices(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:322:def unflatten_eps_sig_array(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:361:    def unflatten_tri_matrix_with_defined_cross_terms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:366:        """Convert array into a diagonal matrix with defined lower cross-terms.
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:376:        # | - unflatten_tri_matrix_with_defined_cross_terms
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:418:    def unflatten_single_triangular_matrix(flat_array, N):
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:462:        epsilon = unflatten_tri_matrix_with_defined_cross_terms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:468:        sigma = unflatten_tri_matrix_with_defined_cross_terms(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:490:def fit_LJ_to_DFT(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:594:def calc_MSE(
./ARCHIVED_STUFF/prototype_ML_proj/lennard_jones_regress/old.lj_regression_180724.py:629:def k_fold_cross_validation(data, k=5):
./ARCHIVED_STUFF/readthedocs.py:5:def tmp_method(var):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:31:    def __init__(self,
./ARCHIVED_STUFF/surface_energy/surface_energy.py:125:    def calc_surface_energy(self, bias, pH, norm_type="area"):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:168:    def calc_std_surface_energy(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:233:    def __count_special_surface_species__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:310:    def __calc_surface_energy_per_area__(self, unnorm_surface_e=None):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:323:    def __calc_std_surface_energy_per_surface_atom__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:335:    def __calc_surface_area__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:350:    def __get_electronic_energy__(self,
./ARCHIVED_STUFF/surface_energy/surface_energy.py:380:    def __calc_units_of_bulk_in_slab__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:437:    def __calc_units_of_reduced_bulk_in_bulk__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:475:    def __calc_bulk_energy_per_formula_unit__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:496:    def __calc_slab_thickness__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:525:    def __init__(self,
./ARCHIVED_STUFF/surface_energy/surface_energy.py:568:    def calculate_surface_energies(self, bulk_energy=None):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:583:    def fit_bulk_energy(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:591:    def inst_surf_e_with_fitted_bulk(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:622:    def __init_dataframe__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:642:    def __sufficient_data_to_fit_bulk(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:677:    def __calc_regressed_bulk_energy__(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:699:    def __recalc_SurfaceEnergy_w_new_bulk__(self, new_bulk_energy):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:731:    def __calc_ave_surface_energy__(self, SurfaceEnergy_instances):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:762:    def plot_E_vs_N_convergence(self):
./ARCHIVED_STUFF/surface_energy/surface_energy.py:795:    def plot_surface_energy(self,
./ARCHIVED_STUFF/surface_energy/surface_energy.py:933:def surface_energy_2(
./ARCHIVED_STUFF/surface_energy/surface_energy.py:976:def surf_e_4(
./ARCHIVED_STUFF/surface_energy/surface_energy.py:1000:    # atoms_i = row_i.get("init_atoms", default=None)
./ARCHIVED_STUFF/surface_energy/surface_energy.py:1001:    elec_energy = row_i.get("elec_energy", default=0.)
./ARCHIVED_STUFF/surface_energy/surface_energy.py:1002:    nonstoich_Os = row_i.get("nonstoich_Os", default=0)
./ARCHIVED_STUFF/surface_energy/surface_energy.py:1003:    elems_dict = row_i.get("elem_num_dict", default={})
./ARCHIVED_STUFF/surface_energy/surface_energy.py:1006:        bulk_e_per_atom = row_i.get("bulk_e_per_atom_DFT", default=0.)
./ARCHIVED_STUFF/surface_energy/surface_energy.py:1018:        surf_e_0 = row_i.get("surf_e_0", default=0.)
./ARCHIVED_STUFF/surface_energy/surface_energy_pourbaix_plot.py:17:    def __init__(self,
./ARCHIVED_STUFF/surface_energy/surface_energy_pourbaix_plot.py:31:    def method_0():
./ARCHIVED_STUFF/tests/plotting/my_plotly_plot.ipynb:53:    "    tmp_define_both_axis_types=True,\n",
./ARCHIVED_STUFF/xrd_spectra/xrd.py:53:    def __init__(self,
./ARCHIVED_STUFF/xrd_spectra/xrd.py:106:    def __read_reflections_table__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:150:    def __process_reflections_table__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:159:    def __create_simplified_facet_string__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:170:    def __create_lorentz_for_all_signals__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:201:    def __create_summed_lorentz_function__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:213:    def __create_theta_array__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:233:    def __create_total_spectrum__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:252:    def compute_peak_positions(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:352:    def __create_save_dir__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:362:    def __save_state__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:382:    def __load_state__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:412:    def __init__(self,
./ARCHIVED_STUFF/xrd_spectra/xrd.py:425:    def create_figure(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:440:    def __trace_peak_labels__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:471:    def __trace_spectra__(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:488:    def get_layout(self):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:576:def get_weighted_xrange(x_bounds, gamma, x0, min_step_size=1):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:597:def Lorentz_i(x0, x, gamma, peak_height):
./ARCHIVED_STUFF/xrd_spectra/xrd.py:610:def Lorentz_distr_i(x0, x_bounds, gamma, intensity):
./ase_modules/add_adsorbate.py:15:def add_adsorbate_centered(active_element, slab, adsorbate, ads_height=2.5):
./ase_modules/add_adsorbate.py:46:def add_graphene_layer(
./ase_modules/adsorbates.py:17:    def __init__(self):
./ase_modules/adsorbates.py:23:    def ooh(self,
./ase_modules/adsorbates.py:67:    def o(self):
./ase_modules/adsorbates.py:79:    def oh(self,
./ase_modules/adsorbates.py:98:    def h2o(self,
./ase_modules/adsorbates.py:118:    def get_adsorbate(self, adsorbate, **kwargs):
./ase_modules/ase_methods.py:61:def update_FINISHED(text, filename=".FINISHED.new"):
./ase_modules/ase_methods.py:86:def set_QE_calc_params(
./ase_modules/ase_methods.py:89:    load_defaults=True,
./ase_modules/ase_methods.py:99:        load_defaults:
./ase_modules/ase_methods.py:110:    espresso_params_inst = Espresso_Params(load_defaults=load_defaults)
./ase_modules/ase_methods.py:140:def ionic_opt(
./ase_modules/ase_methods.py:415:def set_init_mag_moms(
./ase_modules/ase_methods.py:562:def increase_abs_val_magmoms(atoms, magmoms_list, increase_amount=0.8):
./ase_modules/ase_methods.py:623:def calc_spinpol(atoms):
./ase_modules/ase_methods.py:648:def simple_mag_moms(atoms):
./ase_modules/ase_methods.py:712:def reduce_magmoms(atoms, ntypx=10):
./ase_modules/ase_methods.py:791:def read_magmoms_from_file(file_name="magmom_init.in"):
./ase_modules/ase_methods.py:833:# def compare_magmoms(self):
./ase_modules/ase_methods.py:834:# def compare_magmoms():
./ase_modules/ase_methods.py:847:#     def nearest_atom(atoms, position):
./ase_modules/ase_methods.py:914:def an_pdos(
./ase_modules/ase_methods.py:996:def spin_pdos(
./ase_modules/ase_methods.py:1011:    atom.charge/atom.magmom. If pdos_pkl not defined, it will be calculated
./ase_modules/ase_methods.py:1013:    defined, will attempt to load from pickle file, but valence_dict must be
./ase_modules/ase_methods.py:1225:def an_bands(atoms, bands_kpts, espresso_params):
./ase_modules/ase_methods.py:1330:# def an_beef_ensemble(atoms, xc):  # COMBAK
./ase_modules/ase_methods.py:1331:def an_beef_ensemble(atoms):
./ase_modules/ase_methods.py:1384:def plot_beef_ensemble(
./ase_modules/ase_methods.py:1419:def an_ads_vib(
./ase_modules/ase_methods.py:1587:def thermochem_harm_corr(
./ase_modules/ase_methods.py:1622:def thermochem_IG_corr(
./ase_modules/ase_methods.py:1690:def clean_up_dft():
./ase_modules/ase_methods.py:1699:    # def update_FINISHED(text, filename=".FINISHED.new"):
./ase_modules/ase_methods.py:1709:    #     /scratch/users/flores12/03_graph_N_Fe/01_opt_struct/N_doped_graph_Fe/1-att/__test__/1-att/_5/uniqnodefile.21286552
./ase_modules/ase_methods.py:1717:    #             os.system("mv *nodefile.* __misc__")
./ase_modules/ase_methods.py:1718:    #             os.system("mv *uniqnodefile..* __misc__")
./ase_modules/ase_methods.py:1742:def read_atoms_from_file(filename=None, try_restart=True):
./ase_modules/ase_methods.py:1818:def convert_atoms_object(atoms_filename, out_file):
./ase_modules/ase_methods.py:1845:def angle_between_lattice_vectors(atoms, vector_0=0, vector_1=1):
./ase_modules/ase_methods.py:1866:def magnitude_of_lattice_vectors(atoms):
./ase_modules/ase_methods.py:1886:def find_diff_between_atoms_objects(atoms_A, atoms_B):
./ase_modules/ase_methods.py:1964:def move_atoms_of_element_i(atoms, element, new_position, dim="z"):
./ase_modules/ase_methods.py:1998:def displace_overlayer(
./ase_modules/ase_methods.py:2044:def change_vacuum(atoms, vacuum):
./ase_modules/ase_methods.py:2075:def number_of_constrained_atoms(atoms):
./ase_modules/ase_methods.py:2092:def highest_position_of_element(atoms, element_symbol):
./ase_modules/ase_methods.py:2124:def number_of_atoms(atoms):
./ase_modules/ase_methods.py:2151:def create_species_element_dict(
./ase_modules/ase_methods.py:2232:def view_in_vesta(
./ase_modules/ase_methods.py:2248:    def randomString(stringLength=10):
./ase_modules/ase_methods.py:2294:def create_gif_from_traj(
./ase_modules/ase_methods.py:2368:def create_gif_from_atoms_movies(
./ase_modules/ase_methods.py:2369:    atoms_file="Default",
./ase_modules/ase_methods.py:2391:    if atoms_file == "Default":
./ase_modules/ase_methods.py:2473:def get_slab_kpts(atoms):
./ase_modules/ase_methods.py:2497:def max_force(atoms):
./ase_modules/ase_methods.py:2538:def get_atom_mapping_dict(atoms_A, atoms_B):
Binary file ./ase_modules/ase_methods.pyc matches
./ase_modules/atoms_wrap.py:6:def class Atoms_Wrapper(object):
./ase_modules/atoms_wrap.py:8:    def __init__(self, arg):
./ase_modules/dft_params.py:3:"""DFT calculator's default parameters.
./ase_modules/dft_params.py:29:    def __init__(self):
./ase_modules/dft_params.py:38:    # def load_submission_params(self, filename=".submission_params.json"):
./ase_modules/dft_params.py:39:    def load_submission_params(self, filename=".submission_params_2.json"):
./ase_modules/dft_params.py:66:    def load_params(self, dir=".", update_params=True):
./ase_modules/dft_params.py:89:    def PythonPath(self):
./ase_modules/dft_params.py:92:        Checks dir is checked for default_espresso_params file
./ase_modules/dft_params.py:109:    def update_params(self, new_params, user_update=True):
./ase_modules/dft_params.py:124:    def write_params(self, path_i=".", overwrite=False):
./ase_modules/dft_params.py:135:        def json_dump_command(params, file):
./ase_modules/dft_params.py:160:    """Useful method to define VASP parameters for DFT job."""
./ase_modules/dft_params.py:163:    def __init__(self, load_defaults=True):
./ase_modules/dft_params.py:167:            load_defaults:
./ase_modules/dft_params.py:173:        if load_defaults:
./ase_modules/dft_params.py:174:            self.params = self.default_params()
./ase_modules/dft_params.py:181:        # "default_espresso_params.json")
./ase_modules/dft_params.py:184:    def default_params(self):
./ase_modules/dft_params.py:185:        """User-defined default DFT parameters."""
./ase_modules/dft_params.py:186:        # | - default_params
./ase_modules/dft_params.py:276:    def create_mod_dict(self):
./ase_modules/dft_params.py:281:        externally in script or if it kept at its default value.
./ase_modules/dft_params.py:295:    """Useful method to define quantum espresso parameters for DFT job."""
./ase_modules/dft_params.py:298:    def __init__(self, load_defaults=True):
./ase_modules/dft_params.py:302:            load_defaults:
./ase_modules/dft_params.py:307:        if load_defaults:
./ase_modules/dft_params.py:308:            self.params = self.default_params()
./ase_modules/dft_params.py:315:    def default_params(self):  # **********************************************
./ase_modules/dft_params.py:316:        """User-defined default DFT parameters."""
./ase_modules/dft_params.py:317:        # | - default_params
./ase_modules/dft_params.py:351:            "nmix": 20,  # num of iter used in mixing scheme (Default 8)
./ase_modules/dft_params.py:371:    def create_mod_dict(self):
./ase_modules/dft_params.py:375:        externally in script or if it kept at its default value.
./ase_modules/dft_params.py:385:    def test_check(self):
./ase_modules/dft_params.py:485:# | - __old__ | default_params with all the commented lines
./ase_modules/dft_params.py:527:#     "nmix": 20,  # num of iter used in mixing scheme (Default 8)
./ase_modules/dft_params.py:535:#  # output = {'disk_io':'default',  # how often espresso writes wavefunctions to disk
Binary file ./ase_modules/dft_params.pyc matches
./ase_modules/get_G.py:33:    def __init__(self,
./ase_modules/get_G.py:36:        default_vib_bool=True,
./ase_modules/get_G.py:46:        self.default_vib_bool = default_vib_bool
./ase_modules/get_G.py:94:    def read_atoms(self,path,**kwargs):
./ase_modules/get_G.py:125:    def update_params(self,atoms):
./ase_modules/get_G.py:165:    def update_delta_atoms(self):
./ase_modules/get_G.py:208:    def vib_correction(self):
./ase_modules/get_G.py:211:        Otherwise, default vibrational corrections are used by calling default_vib()
./ase_modules/get_G.py:215:        def vib_indices(atoms):
./ase_modules/get_G.py:240:        def parse_corr(path):
./ase_modules/get_G.py:273:        if self.default_vib_bool:
./ase_modules/get_G.py:274:            self.default_vib()
./ase_modules/get_G.py:302:                    self.default_vib()
./ase_modules/get_G.py:311:                    self.default_vib()
./ase_modules/get_G.py:316:            self.default_vib()
./ase_modules/get_G.py:320:    def default_vib(self):
./ase_modules/get_G.py:324:        # | - default_vib
./ase_modules/get_G.py:325:        self.default_vib_bool = True
./ase_modules/get_G.py:330:                self.ads_corr += default_vib_dict[sym]*self.delta_atoms[sym]
./ase_modules/get_G.py:332:                self.slab_corr -= default_vib_dict[sym]*self.delta_atoms[sym]
./ase_modules/get_G.py:335:    def set_refs(self):
./ase_modules/get_G.py:337:        Formulate references for atoms in self.delta_atoms. Currently chooses reference indicated as default.
./ase_modules/get_G.py:345:                        if len(references[atom][ref]) == 3: #use default reference
./ase_modules/get_G.py:349:    def calc_G(self):
./ase_modules/get_G.py:369:    def get_DFT_ref(self,ref):
./ase_modules/get_G.py:395:    def compare_pp(self,pp1,pp2,syms):
./ase_modules/get_G.py:405:    def fmax(self,atoms):
./ase_modules/get_G.py:418:    def compare_magmoms(self):
./ase_modules/get_G.py:422:        def nearest_atom(atoms,position):
./ase_modules/get_G.py:487:    def rms_displacement(self):
./ase_modules/get_G.py:497:    def compare_wf(self):
./ase_modules/get_G.py:512:    def read_wf(self,path):
./ase_modules/get_G.py:527:    # def __repr__(self):
./ase_modules/get_G.py:533:    #     Default vibrational corrections applied to adsorbates
./ase_modules/get_G.py:553:    #         if self.default_vib_bool:
./ase_modules/get_G.py:554:    #             string += "\nUsing default vibrational corrections for adsorbates"
./ase_modules/get_G.py:578:default_vib_dict = {'H':0.3, 'O':0.05, 'N': 0.05, 'Ru':0.}
./ase_modules/get_G.py:583:            'H+/e-':([('H2',0.5)],[('e*U_RHE',-1)],'DEF')
./ase_modules/get_G.py:587:            'H2O(l)':([('H2O(l)',1),('H2',-1)],[('e*U_RHE',2)],'DEF')
./ase_modules/get_G.py:590:            'N2':([('N2',0.5)],[('kB*T*ln*(P_N2)',0.5)],'DEF')
./ase_modules/get_G.py:593:            'RuO4':([('RuO4(l)',1),('H2O(l)',-4),('H2',4)],[('e*U_RHE',-8)],'DEF')
./ase_modules/get_G.py:596:            'Li':([('Li',1)],[('N/A',0)],'DEF')
./ase_modules/get_G.py:771:            #v2 (default QE)
./ase_modules/get_G.py:798:#     parser.add_argument('-i', '--index', type=int, help = 'Index to use for both traj files', default = -1)
./ase_modules/get_G.py:801:#     G = Get_G(args.slab,args.ads,default_vib_bool = args.vibrations, get_E = args.elec_only, index=args.index)
./atoms_objects/slab_generation.py:19:def cut_slab_ase(
./atoms_objects/slab_generation.py:50:def cut_slab_pymatgen(
./atoms_objects/slab_generation.py:97:def cut_slab_catkit(
./bader_charge/bader.py:21:def bader(
./bader_charge/bader.py:143:def cd2cube(atoms, spin=""):
./bader_charge/bader.py:200:def cleanup(suffix="", save_cube=True):
./bader_charge/bader.py:225:def bader_exec(
./colors/colors.py:24:def generate_color_palette(
./colors/colors.py:47:def color_scale_interp(
./colors/colors_light.py:50:def rgb_to_hex(rgb_tuple):
./colors/colors_light.py:58:    def clamp(x):
./colors/colors_light.py:70:def get_random_color():
./colors/colors_light.py:75:    color = ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
./colors/colors_light.py:81:def rgb_to_hex(rgb_tuple):
./colors/colors_light.py:89:    def clamp(x):
./colors/colors_light.py:101:def hex_to_rgb(hex_code):
./colors/colors_light.py:109:def darken_color(color, darken_amount=0.2):
./colors/colors_light.py:124:def lighten_color(color, lighten_amount=0.2):
./compute_envs/nersc.py:34:    def __init__(self,
./compute_envs/nersc.py:51:        self.default_sub_params = self.default_submission_parameters()
./compute_envs/nersc.py:63:    def submit_job_clust(self, **kwargs):
./compute_envs/nersc.py:73:        params = merge_two_dicts(self.default_sub_params, kwargs)
./compute_envs/nersc.py:175:        if params["job_name"] == "Default":
./compute_envs/nersc.py:185:        # Only the -q needs to be defined
./compute_envs/nersc.py:273:    def default_submission_parameters(self):
./compute_envs/nersc.py:274:        """Defaul SLURM parameters for Sherlock cluster."""
./compute_envs/nersc.py:275:        # | - default_submission_parameters
./compute_envs/nersc.py:277:        def_params = {
./compute_envs/nersc.py:309:        return(def_params)
./compute_envs/nersc.py:313:    def __import_arch_class__(self, params):
./compute_envs/nersc.py:331:    def job_state_dict(self):
./compute_envs/nersc.py:351:    def __queue_types__(self):
./compute_envs/nersc.py:364:    def job_info_batch(self, job_id, path_i=None):
./compute_envs/nersc.py:458:    def completed_file(self, path_i="."):
./compute_envs/nersc.py:474:    def job_state(self, path_i="."):
./compute_envs/nersc.py:502:    def get_jobid(self, path_i="."):
./compute_envs/nersc.py:532:    def __init__(self):
./compute_envs/nersc.py:556:    def __make_run_vasp_script__(self, params):
./compute_envs/nersc.py:580:    def __self_sbatch_settings__(self):
./compute_envs/nersc.py:584:        def_params = {
./compute_envs/nersc.py:589:        return(def_params)
./compute_envs/nersc.py:592:    def __module_load_vasp__(self):
./compute_envs/nersc.py:615:    def __init__(self):
./compute_envs/nersc.py:630:    def __self_sbatch_settings__(self):
./compute_envs/nersc.py:634:        def_params = {
./compute_envs/nersc.py:639:        return(def_params)
./compute_envs/nersc.py:642:    def __make_run_vasp_script__(self, params):
./DensityFunctionalTheory/quantum_espresso/qe_methods.py:17:def number_of_atoms(path_i=".", log="log"):
./DensityFunctionalTheory/quantum_espresso/qe_methods.py:53:def tot_abs_magnetization(path_i=".", log="log"):
./DensityFunctionalTheory/quantum_espresso/qe_methods.py:96:def element_index_dict(path_i=".", log="log"):
./DensityFunctionalTheory/quantum_espresso/qe_methods.py:146:def magmom_charge_data(path_i=".", log="log"):
./DensityFunctionalTheory/quantum_espresso/qe_methods.py:229:def estimate_magmom(
./DensityFunctionalTheory/quantum_espresso/qe_methods.py:320:def scf_convergence(path_i=".", log="log"):
./DensityFunctionalTheory/vasp/parse_oszicar.py:21:def parse_oszicar(vasp_dir=".", oszicar_lines=None):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:34:def read_vasp_out(filename='OUTCAR', index=-1):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:52:def _read_outcar_frame(lines, header_data):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:218:def iread_vasp_out(filename, index=-1):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:225:def outcarchunks(fd):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:248:def _read_outcar_header(fd):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:317:def _outcar_check_line(line):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:332:    def __init__(self, lines, header_data):
./DensityFunctionalTheory/vasp/read_bad_outcar.py:336:    def build(self):
./DensityFunctionalTheory/vasp/vasp_methods.py:22:def num_of_atoms_OUTCAR_tmp(outcar_fh):
./DensityFunctionalTheory/vasp/vasp_methods.py:46:def create_vib_modes_atoms(
./DensityFunctionalTheory/vasp/vasp_methods.py:148:                atoms_file="Default",
./DensityFunctionalTheory/vasp/vasp_methods.py:158:def create_vdw_kernel_symlink():
./DensityFunctionalTheory/vasp/vasp_methods.py:188:def read_incar(path_i, verbose=False):
./DensityFunctionalTheory/vasp/vasp_methods.py:215:def parse_incar(incar_list):
./DensityFunctionalTheory/vasp/vasp_methods.py:373:def read_bad_OUTCAR(filename):
./DensityFunctionalTheory/vasp/vasp_methods.py:388:def get_irr_kpts_from_outcar(path_i):
./DensityFunctionalTheory/vasp/vasp_methods.py:439:def read_ase_sort_dat(path_i=None):
./DensityFunctionalTheory/vasp/vasp_methods.py:479:def parse_dipole_OUTCAR(file_path):
./DensityFunctionalTheory/vasp/vasp_methods.py:547:def get_BEC_data(outcar_path):
./DensityFunctionalTheory/vasp/vasp_methods.py:593:    def chunks(lst, n):
./dft_job_automat/compute_env.py:39:def slurm_squeue_parse(
./dft_job_automat/compute_env.py:107:    def __init__(self,
./dft_job_automat/compute_env.py:112:        self.default_sub_params = self.default_submission_parameters()
./dft_job_automat/compute_env.py:119:    def __parse_cluster_type__(self):
./dft_job_automat/compute_env.py:169:    def default_submission_parameters(self):
./dft_job_automat/compute_env.py:171:        # | - default_submission_parameters
./dft_job_automat/compute_env.py:172:        def_params = {
./dft_job_automat/compute_env.py:174:            "job_name": "Default",
./dft_job_automat/compute_env.py:180:        return(def_params)
./dft_job_automat/compute_env.py:183:    def is_job_submitted(self, path_i="."):
./dft_job_automat/compute_env.py:206:    def job_state(self, path_i="."):
./dft_job_automat/compute_env.py:232:    def job_info_batch(self, path_i="."):
./dft_job_automat/compute_env.py:258:    def submit_job(self, **kwargs):
./dft_job_automat/compute_env.py:268:        kwargs = merge_two_dicts(self.default_sub_params, kwargs)
./dft_job_automat/compute_env.py:323:    def __init__(self, root_dir="."):
./dft_job_automat/compute_env.py:360:        self.default_sub_params = self.default_submission_parameters()
./dft_job_automat/compute_env.py:377:    def default_submission_parameters(self):
./dft_job_automat/compute_env.py:378:        """Defaul SLURM parameters for Sherlock cluster."""
./dft_job_automat/compute_env.py:379:        # | - default_submission_parameters
./dft_job_automat/compute_env.py:381:        def_params = {
./dft_job_automat/compute_env.py:408:        return(def_params)
./dft_job_automat/compute_env.py:411:    def submit_job_clust(self, **kwargs):
./dft_job_automat/compute_env.py:421:        params = merge_two_dicts(self.default_sub_params, kwargs)
./dft_job_automat/compute_env.py:437:        if params["job_name"] == "Default":
./dft_job_automat/compute_env.py:464:        # Only the -q needs to be defined
./dft_job_automat/compute_env.py:569:    def job_state_dict(self):
./dft_job_automat/compute_env.py:588:    def __queue_types__(self):
./dft_job_automat/compute_env.py:601:    def job_info_batch(self, job_id, path_i=None):
./dft_job_automat/compute_env.py:695:    def completed_file(self, path_i="."):
./dft_job_automat/compute_env.py:711:    def job_state(self, path_i="."):
./dft_job_automat/compute_env.py:746:    def get_jobid(self, path_i="."):
./dft_job_automat/compute_env.py:770:    def __init__(self,
./dft_job_automat/compute_env.py:777:        self.default_sub_params = self.default_submission_parameters()
./dft_job_automat/compute_env.py:787:    def job_state_dict(self):
./dft_job_automat/compute_env.py:806:    def __queue_types__(self):
./dft_job_automat/compute_env.py:823:    def default_submission_parameters(self):
./dft_job_automat/compute_env.py:826:        # | - default_submission_parameters
./dft_job_automat/compute_env.py:827:        def_params = {
./dft_job_automat/compute_env.py:834:            # "job_name":     "Default",
./dft_job_automat/compute_env.py:838:        return(def_params)
./dft_job_automat/compute_env.py:841:    def submit_job_clust(self, **kwargs):
./dft_job_automat/compute_env.py:844:        ABSOLUTELY NEED TO DEFINE 'path_i' FOR THIS TO WORK!!!!!!!!!!!!!!!!!!
./dft_job_automat/compute_env.py:852:        params = merge_two_dicts(self.default_sub_params, kwargs)
./dft_job_automat/compute_env.py:866:        if params["job_name"] == "Default":
./dft_job_automat/compute_env.py:991:    def get_jobid(self, path_i="."):
./dft_job_automat/compute_env.py:1009:    def job_info_batch(self, path_i="."):
./dft_job_automat/compute_env.py:1083:    def job_state(self, path_i="."):
./dft_job_automat/compute_env.py:1116:    def __init__(self, root_dir="."):
./dft_job_automat/compute_env.py:1129:        self.default_sub_params = self.default_submission_parameters()
./dft_job_automat/compute_env.py:1151:    def __parse_username__(self):
./dft_job_automat/compute_env.py:1169:    def __make_run_vasp_script__(self, params):
./dft_job_automat/compute_env.py:1192:    def default_submission_parameters(self):
./dft_job_automat/compute_env.py:1193:        """Defaul SLURM parameters for Sherlock cluster."""
./dft_job_automat/compute_env.py:1194:        # | - default_submission_parameters
./dft_job_automat/compute_env.py:1196:        def_params = {
./dft_job_automat/compute_env.py:1202:            "job_name": "Default",  # --job-name
./dft_job_automat/compute_env.py:1211:        return(def_params)
./dft_job_automat/compute_env.py:1214:    def submit_job_clust(self, **kwargs):
./dft_job_automat/compute_env.py:1224:        params = merge_two_dicts(self.default_sub_params, kwargs)
./dft_job_automat/compute_env.py:1235:        if params["job_name"] == "Default":
./dft_job_automat/compute_env.py:1345:    def job_state_dict(self):
./dft_job_automat/compute_env.py:1364:    def __queue_types__(self):
./dft_job_automat/compute_env.py:1376:    def get_jobid(self, path_i="."):
./dft_job_automat/compute_env.py:1395:    def job_info_batch(self, job_id, path_i=None):
./dft_job_automat/compute_env.py:1449:    def completed_file(self, path_i="."):
./dft_job_automat/compute_env.py:1466:    def job_state(self, path_i="."):
./dft_job_automat/compute_env.py:1496:    def get_jobid(self, path_i="."):
./dft_job_automat/compute_env.py:1520:    Must define $awsdir environment variable
./dft_job_automat/compute_env.py:1525:    def __init__(self,
./dft_job_automat/compute_env.py:1533:        self.default_sub_params = self.default_submission_parameters()
./dft_job_automat/compute_env.py:1553:    def default_submission_parameters(self):
./dft_job_automat/compute_env.py:1556:        # | - default_submission_parameters
./dft_job_automat/compute_env.py:1557:        def_params = {
./dft_job_automat/compute_env.py:1559:            "cpus": "default",
./dft_job_automat/compute_env.py:1562:            # "job_name":     "Default",
./dft_job_automat/compute_env.py:1569:        return(def_params)
./dft_job_automat/compute_env.py:1572:    def submit_job_clust(self, **kwargs):
./dft_job_automat/compute_env.py:1583:        params = merge_two_dicts(self.default_sub_params, kwargs)
./dft_job_automat/compute_env.py:1625:            if cpus == "default":
./dft_job_automat/compute_env.py:1699:    def job_state_dict(self):
./dft_job_automat/compute_env.py:1720:    def __queue_types__(self):
./dft_job_automat/compute_env.py:1734:    def __copy_pyth_mods_packs_to_job_dir__(
./dft_job_automat/compute_env.py:1774:    def get_jobid(self, path_i="."):
./dft_job_automat/compute_env.py:1789:    def job_state(self, path_i="."):
./dft_job_automat/compute_env.py:1827:    def spot_terminated(self, path_i="."):
./dft_job_automat/compute_env.py:1843:    def completed_file(self, path_i="."):
./dft_job_automat/compute_env.py:1857:    def job_info_batch(self, job_id):
./dft_job_automat/compute_env.py:1903:    def __init__(self, root_dir="."):
./dft_job_automat/compute_env.py:1912:        # self.default_sub_params = self.default_submission_parameters()
./dft_job_automat/compute_env.py:1930:    def submit_job_clust(self, **kwargs):
./dft_job_automat/compute_env.py:1941:    def job_state(self, path_i="."):
./dft_job_automat/job_analysis.py:48:    def __init__(self,
./dft_job_automat/job_analysis.py:186:    def add_jobs_queue_data(self):
./dft_job_automat/job_analysis.py:192:    def job_queue_info(self, path_i):
./dft_job_automat/job_analysis.py:218:    def __load_dataframe__(self):
./dft_job_automat/job_analysis.py:241:    def __write_dataframe__(self):
./dft_job_automat/job_analysis.py:263:    def add_all_columns_from_file(self):
./dft_job_automat/job_analysis.py:291:    def __add_data_column_from_file__(self,
./dft_job_automat/job_analysis.py:370:    def add_data_column(self,
./dft_job_automat/job_analysis.py:407:        def process_entry(entry):
./dft_job_automat/job_analysis.py:499:    def job_state_file(self, path_i="."):
./dft_job_automat/job_analysis.py:521:    def create_data_sets(self, data_frame, free_variable):
./dft_job_automat/job_analysis.py:574:    def filter_early_revisions(self, dataframe):
./dft_job_automat/job_analysis.py:592:    def job_state(self, path_i):
./dft_job_automat/job_analysis.py:622:    def job_state_2(self, path):
./dft_job_automat/job_analysis.py:703:    def job_state_3(self, path_i):
./dft_job_automat/job_analysis.py:725:    def job_ready(self, job_i, require_READY_tag=True):
./dft_job_automat/job_analysis.py:765:    def job_pending(self, job_i):
./dft_job_automat/job_analysis.py:810:    def job_running(self, job_i):
./dft_job_automat/job_analysis.py:849:    def job_succeeded(self, job_i):
./dft_job_automat/job_analysis.py:906:    def job_failed(self, job_i):
./dft_job_automat/job_analysis.py:948:    def job_submitted(self, path_i):
./dft_job_automat/job_analysis.py:968:    def _job_ready(self, path_i, require_READY_tag=True):
./dft_job_automat/job_analysis.py:1006:    def _job_pending(self, path_i):
./dft_job_automat/job_analysis.py:1042:    def _job_running(self, path_i):
./dft_job_automat/job_analysis.py:1075:    def _job_succeeded(self, path_i):
./dft_job_automat/job_analysis.py:1114:    def _job_failed(self, path_i):
./dft_job_automat/job_analysis.py:1156:    def _job_submitted(self, path_i):
./dft_job_automat/job_analysis.py:1175:    def parse_job_error_file(self, path_i):
./dft_job_automat/job_analysis.py:1224:def parse_job_dirs(dirs_to_parse):
./dft_job_automat/job_analysis.py:1347:def compare_parsed_and_user_job_dirs(parsed_dirs, user_dirs):
./dft_job_automat/job_analysis.py:1391:    # def add_data_column(self,
./dft_job_automat/job_analysis.py:1500:    def view_atoms(self, ind):
./dft_job_automat/job_analysis.py:1527:    def job_revisions(self, path):
./dft_job_automat/job_dependencies.py:21:def full_path_i(root_dir, step_dir_names, step, path):
./dft_job_automat/job_dependencies.py:30:def copyfiles_onestep_up(
./dft_job_automat/job_dependencies.py:40:    def copy_if_not_in_dest(source, dest_file):
./dft_job_automat/job_dependencies.py:144:def create_atoms_list(atoms_name, file_ext, root_dir):
./dft_job_automat/job_dependencies.py:156:def create_level_entries_dict(tree_level_labels, tree_level_values):
./dft_job_automat/job_dependencies.py:169:def job_runnable(df, root_dir_beg, path_i):
./dft_job_automat/job_dependencies.py:188:def job_failed(df, root_dir_beg, path_i):
./dft_job_automat/job_dependencies.py:231:    def __init__(self,
./dft_job_automat/job_dependencies.py:315:    def list_of_None_if_None(self, input):
./dft_job_automat/job_dependencies.py:327:    def __set_cwd__(self, root_dir):
./dft_job_automat/job_dependencies.py:342:    def __set_step_dir_names__(self):
./dft_job_automat/job_dependencies.py:355:    def __set_model_names__(self, model_names):
./dft_job_automat/job_dependencies.py:374:    def __create_jobs_an__(self):
./dft_job_automat/job_dependencies.py:413:    def __create_jobs_man__(self):
./dft_job_automat/job_dependencies.py:456:    def __create_parent_dirs__(self):
./dft_job_automat/job_dependencies.py:470:    def __prep_dir_sys__(self):
./dft_job_automat/job_dependencies.py:529:    def __job_maint__(self):
./dft_job_automat/job_dependencies.py:533:        user defined methods
./dft_job_automat/job_manager.py:32:    def __init__(self,
./dft_job_automat/job_manager.py:112:    def restart_job(self,
./dft_job_automat/job_manager.py:133:        # FIXME I've defined this in many places.
./dft_job_automat/job_manager.py:134:        def copy_if_not_in_dest(source, dest_file):
./dft_job_automat/job_manager.py:205:    def copy_files_from_last_revision(self,
./dft_job_automat/job_manager.py:229:        def copy_if_not_in_dest(source, dest_file):
./dft_job_automat/job_manager.py:293:    def submit_job(self, **kwargs):
./dft_job_automat/job_manager.py:305:    def remove_rev_folder(self, revision_number):
./dft_job_automat/job_manager.py:320:    def restart_job_2(self, prev_rev_file_list=[], root_dir_file_list=[]):
./dft_job_automat/job_manager.py:377:    def copy_files_jd(self, file_list, variable_lst, revision="Auto"):
./dft_job_automat/job_manager.py:394:    def create_job_dir(self, variable_lst, revision="Auto"):
./dft_job_automat/job_manager.py:427:    def submit_jobs(self, path=None, queue="medium", copy_PythonModules=True):
./dft_job_automat/job_manager.py:439:        # def submit_folder_job(folder_dir, bash_command):
./dft_job_automat/job_manager.py:514:        def num_of_files(dir):
./dft_job_automat/job_manager.py:541:    def cancel_jobs(self, state="RUNNABLE"):
./dft_job_automat/job_manager.py:557:    def update_jobs_queue_file(self):
./dft_job_automat/job_setup.py:35:    def __init__(self,
./dft_job_automat/job_setup.py:50:                Max revisions for unique job, defined by the set of job params
./dft_job_automat/job_setup.py:75:    def write_job_parameters(self):
./dft_job_automat/job_setup.py:90:        def is_jsonable(x):
./dft_job_automat/job_setup.py:132:    def __set_job_parameters__(self, job_params_dict):
./dft_job_automat/job_setup.py:148:    def __read_job_params_file__(self):
./dft_job_automat/job_setup.py:203:    def __revision_number__(self):
./dft_job_automat/job_setup.py:224:    def __init__(self,
./dft_job_automat/job_setup.py:288:    def __job_i_param_dict_to_job_var_lst__(self, params_dict):
./dft_job_automat/job_setup.py:312:    def write_job_params_json_file(self):
./dft_job_automat/job_setup.py:321:    def create_Jobs_from_dicts_and_paths(self,
./dft_job_automat/job_setup.py:355:    def __Job_list__(self):
./dft_job_automat/job_setup.py:483:    def __job_i_vars_to_dict__(self, job_i_vars):
./dft_job_automat/job_setup.py:500:    def __create_jobs_bin__(self):
./dft_job_automat/job_setup.py:512:    def __folders_exist__(self, folders_exist):
./dft_job_automat/job_setup.py:549:    def __set_root_dir__(self, root_dir_in):
./dft_job_automat/job_setup.py:560:    def __set_working_dir__(self, working_dir_in):
./dft_job_automat/job_setup.py:573:    def __check_input__(self):
./dft_job_automat/job_setup.py:579:            undefined_labels = []
./dft_job_automat/job_setup.py:581:                undefined_labels.append(i)
./dft_job_automat/job_setup.py:585:            message += "The following properties need to be defined" + "\n"
./dft_job_automat/job_setup.py:586:            message += str(undefined_labels)
./dft_job_automat/job_setup.py:591:    def __number_of_jobs__(self):
./dft_job_automat/job_setup.py:617:    def new_var_lst_to_path(self,
./dft_job_automat/job_setup.py:693:    def var_lst_to_path(self,
./dft_job_automat/job_setup.py:762:    def extract_prop_from_var_lst(self, variable_lst, property):
./dft_job_automat/job_setup.py:782:    def load_dir_struct(self):
./dft_job_automat/job_setup.py:846:    def __load_dir_structure_file__(self):
./dft_job_automat/job_setup.py:902:    def __create_level_entries_dict__(self,
./dft_job_automat/job_setup.py:921:    def __level_entries_list__(self):
./dft_job_automat/job_setup.py:940:    def __order_dict__(self, tree_level_labels, level_entries):
./dft_job_automat/job_setup.py:965:    def __job_variable_list__(self, level_entries, order_dict):
./dft_job_automat/job_setup.py:1006:    def create_dir_struct(self, create_first_rev_folder="True"):
./dft_job_automat/job_setup.py:1051:    def old_create_dir_struct(self, create_first_rev_folder="True"):
./dft_job_automat/job_setup.py:1143:    def check_inputs(self):
./dft_job_automat/job_setup.py:1156:    def __create_dir_structure_file__(self):
./dft_job_automat/job_setup.py:1181:    def __replace_p_for_per__(self, text):
./dft_job_automat/job_setup.py:1211:    def __replace_negative_for_n__(self, text):
./dft_job_automat/job_setup.py:1232:    def __load_jobs_attributes__(self):
./dft_job_automat/job_setup.py:1247:    def append_jobs_attributes(self, attribute):
./dft_job_automat/job_setup.py:1265:    def __gen_datatable__(self):
./dft_job_automat/job_setup.py:1291:    def __revision_list_and_max__(self, path_i):
./dft_job_automat/job_setup.py:1334:    def copy_files_jd(self, file_list, variable_lst, revision="Auto"):
./dft_job_automat/job_setup.py:1358:    def __generate_data_table__(self):
./dft_job_automat/job_setup.py:1388:    def job_revision_number_old(self, variable_lst):
./dft_job_automat/job_types_classes/data_frame_methods.py:19:    def __init__(self, dataframe):
./dft_job_automat/job_types_classes/data_frame_methods.py:32:    def create_atoms_objects(self,
./dft_job_automat/job_types_classes/dft_methods.py:3:"""Class defining methods to extract/manipulate data in vasp raman job folders.
./dft_job_automat/job_types_classes/dft_methods.py:29:    def __init__(self,
./dft_job_automat/job_types_classes/dft_methods.py:43:    def pdos_data(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:60:    def bands_data(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:76:    def magmom_charge_history(self, path_i, log="calcdir/log"):
./dft_job_automat/job_types_classes/dft_methods.py:96:    def gibbs_energy(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:115:    def gibbs_correction(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:132:    def elec_energy(self, path_i, atoms_file="out_opt.traj"):
./dft_job_automat/job_types_classes/dft_methods.py:170:    def atoms_object(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:219:    def outcar(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:269:    def incar(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:282:    def init_atoms(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:309:    def parse_error_file(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:323:    def atom_type_num_dict(self, path_i):
./dft_job_automat/job_types_classes/dft_methods.py:359:    # def dft_params(path_i):
./dft_job_automat/job_types_classes/dft_methods.py:360:    def dft_params(self, path_i):
Binary file ./dft_job_automat/job_types_classes/dft_methods.pyc matches
./dft_job_automat/job_types_classes/raman_methods.py:1:"""Class defining methods to extract/manipulate data in vasp raman job folders."""
./dft_job_automat/job_types_classes/raman_methods.py:22:    def __init__(self, methods_to_run=[]):
./dft_job_automat/job_types_classes/raman_methods.py:33:    def tmp_meth(self, path_i):
./dft_job_automat/job_types_classes/raman_methods.py:40:    def read_modes_file(self, path_i):
Binary file ./dft_job_automat/job_types_classes/raman_methods.pyc matches
./dft_job_automat/slurm.py:13:def get_sbatch_command(
./dft_post_analysis/bands.py:19:def plot_band_series(
./dft_post_analysis/bands.py:51:def filter_bands_data(
./dft_post_analysis/bands.py:108:def plot_bands(
./dft_post_analysis/bands.py:138:        # For the time being I'll just redefine e
./dft_post_analysis/charge_density.py:28:    def __init__(self,
./dft_post_analysis/charge_density.py:48:        # | - Define User Attributes
./dft_post_analysis/charge_density.py:75:    def __load_cube_file__(self):
./dft_post_analysis/charge_density.py:93:    def __process_data__(self):
./dft_post_analysis/charge_density.py:119:        def multiply_by_unit_cell(row, atoms=None):
./dft_post_analysis/charge_density.py:147:    def __number_of_data_points__(self):
./dft_post_analysis/charge_density.py:157:    def __filter_data__(self):
./dft_post_analysis/charge_density.py:177:    def __norm_electron_density__(self):
./dft_post_analysis/charge_density.py:186:    def __filter_low_density__(self):
./dft_post_analysis/charge_density.py:197:    def __keep_only_edges__(self):
./dft_post_analysis/charge_density.py:220:    def __save_dataframe__(self):
./dft_post_analysis/charge_density.py:233:    def __load_dataframe__(self):
./dft_post_analysis/charge_density.py:243:    def create_charge_density_plotting_trace(self,
./dft_post_analysis/charge_density.py:295:    def create_unit_cell_plotting_trace(self,
./dft_post_analysis/charge_density.py:307:        def unit_cell_leg_trace(
./dft_post_analysis/charge_density.py:423:    def create_atoms_plotting_trace(self,
./dft_post_analysis/dos.py:23:def plot_dos_series(
./dft_post_analysis/dos.py:50:def filter_pdos_data(pdos_data, percent_keep=0.4):
./dft_post_analysis/dos.py:104:def plot_pdos_dos(
./dft_post_analysis/dos_bands_combined.py:20:def plot_pdos_bands(
./dft_post_analysis/rapiDOS/rapiDOS.py:33:def read_dosfile(data_folder):
./dft_post_analysis/rapiDOS/rapiDOS.py:49:def read_posfile(data_folder):
./dft_post_analysis/rapiDOS/rapiDOS.py:63:def write_dos0(lines, index, nedos, efermi, out_folder):
./dft_post_analysis/rapiDOS/rapiDOS.py:84:def write_nospin(lines, index, nedos, natoms, ncols, efermi, data_folder, out_folder):
./dft_post_analysis/rapiDOS/rapiDOS.py:116:def write_spin(lines, index, nedos, natoms, ncols, efermi, data_folder, out_folder):
./dft_post_analysis/rapiDOS/rapiDOS.py:152:def get_bandgap(total_dos):
./dft_post_analysis/rapiDOS/rapiDOS.py:184:def rapiDOS(
./dft_post_analysis/rapiDOS/rapiDOS.py:272:    # Define the columns of the database for the PDOS:
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:61:def read_dosfile():
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:75:def read_posfile():
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:87:def write_dos0(lines, index, nedos, efermi):
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:107:def write_nospin(lines, index, nedos, natoms, ncols, efermi):
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:138:def write_spin(lines, index, nedos, natoms, ncols, efermi):
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:198:# Define the columns of the database for the PDOS:
./dft_post_analysis/rapiDOS/rapiDOS_original_jose.py:285:def get_bandgap():
./dft_post_analysis/rapiDOS/README:26:the jupyter notebook in your default browser.
./dft_post_analysis/wf.py:16:def find_max_empty_space(atoms, edir=3):
./dft_post_analysis/wf.py:21:        in scaled coordinates (0 to 1) in the edir direction (default z).
./dft_post_analysis/wf.py:43:def calc_wf(atoms, outdir):
./file_operations.py:14:def copy_files_to_dir(files_to_copy, folder_path, verbose=False):
./jupyter_modules/jupyter_helpers/following_tail.py:7:def display_one_at_a_time(text):
./jupyter_modules/jupyter_helpers/following_tail.py:14:    def __init__(self, n=5):
./jupyter_modules/jupyter_helpers/following_tail.py:17:    def activate(self):
./jupyter_modules/jupyter_helpers/following_tail.py:21:    def __call__(self, *args, **kwargs):
./jupyter_modules/jupyter_helpers/following_tail.py:27:    def __init__(self, n=1):
./jupyter_modules/jupyter_helpers/following_tail.py:37:    def __call__(self, text):
./jupyter_modules/jupyter_helpers/following_tail.py:44:    def pack_to_div(obj):
./jupyter_modules/jupyter_helpers/following_tail.py:50:        def __init__(self, n=5):
./jupyter_modules/jupyter_helpers/following_tail.py:55:        def activate(self):
./jupyter_modules/jupyter_helpers/following_tail.py:58:        def __call__(self, text):
./jupyter_modules/jupyter_methods.py:24:def clean_ipynb(ipynb_file_path, overwrite):
./jupyter_modules/jupyter_methods.py:86:def get_ipynb_notebook_paths(
./jupyter_modules/jupyter_methods.py:155:def get_df_jupyter_notebooks(
./jupyter_modules/jupyter_methods.py:220:    def method(row_i):
./misc_modules/image_processing.py:10:def convert_pdf_to_svg(figure_path, out_dir, converter="inkscape"):
./misc_modules/misc_methods.py:14:def even_spaced_range(start_finish, spacing):
./misc_modules/misc_methods.py:17:    between each entry defined by "spacing".
./misc_modules/misc_methods.py:39:def merge_two_dicts(x, y):
./misc_modules/misc_methods.py:52:def dict_merge(dct, merge_dct):
./misc_modules/misc_methods.py:77:def remove_file_from_all_folders(
./misc_modules/misc_methods.py:140:def GetFriendlyID(append_random_num=False):
./misc_modules/misc_methods.py:159:def GetUniqueFriendlyID(used_ids):
Binary file ./misc_modules/misc_methods.pyc matches
./misc_modules/numpy_methods.py:5:def unit_vector(vector):
./misc_modules/numpy_methods.py:14:def angle_between(v1, v2):
./misc_modules/numpy_methods.py:32:def smooth_data_series(y_data, box_pts):
./misc_modules/numpy_methods.py:41:def make_filter_list(len_data, percent_keep):
./misc_modules/pandas_methods.py:15:def reorder_df_columns(col_order_list, df):
./misc_modules/pandas_methods.py:39:def drop_columns(df=None, columns=None, keep_or_drop="keep"):
./misc_modules/pandas_methods.py:64:def drop_nonunique_cols(df=None, ):
./misc_modules/plotly_methods.py:16:def plotlyfig2json(fig, fpath=None):
./misc_modules/plotly_methods.py:43:def plotlyfromjson(fpath):
./plotting/my_plotly.py:20:# | - Nice default plot settings
./plotting/my_plotly.py:71:def read_plotly_html(path=None):
./plotting/my_plotly.py:87:def get_xy_axis_info(fig):
./plotting/my_plotly.py:138:def add_duplicate_axes(
./plotting/my_plotly.py:143:    tmp_define_both_axis_types=False,
./plotting/my_plotly.py:168:        tmp_define_both_axis_types=True,
./plotting/my_plotly.py:233:        if tmp_define_both_axis_types:
./plotting/my_plotly.py:252:def add_minor_ticks(
./plotting/my_plotly.py:350:def my_plotly_plot(
./plotting/my_plotly.py:423:            # default_width='100%',
./plotting/my_plotly.py:424:            # default_height='100%',
./plotting/my_plotly.py:475:def reapply_colors(data):
./plotting/my_plotly.py:476:    """Redefines the line colors of a plotly data series.
./plotting/my_plotly.py:528:# def plot_layout(
./plotting/my_plotly.py:534:# def add_duplicate_axes(
./plotting/plotly_layout_template.py:15:    annotationdefaults=None,
./plotting/plotly_layout_template.py:55:    imagedefaults=None,
./plotting/plotly_layout_template.py:80:    shapedefaults=None,
./plotting/plotly_layout_template.py:83:    sliderdefaults=None,
./plotting/plotly_layout_template.py:93:    updatemenudefaults=None,
./plotting/plotly_layout_template.py:167:    tickformatstopdefaults=None,
./rclone/bin/rclone_command.py:21:    default=False,
./rclone/bin/rcp.py:21:    default=False,
./vector_methods.py:18:def radians_to_degrees(angle):
./vector_methods.py:27:def degrees_to_radians(angle):
./vector_methods.py:36:def unit_vector(vector):
./vector_methods.py:42:def angle_between_vectors(v1, v2, return_radians=True):
./vector_methods.py:64:def get_vector_magnitude(v1):
./vector_methods.py:70:def get_rotation_matrix(theta, axis):
./__misc__/sc_temp_methods.py:8:def color_scale_interp(
./__misc__/sc_temp_methods.py:54:        def rgb_to_hex(rgb_tuple):
./__misc__/sc_temp_methods.py:61:            def clamp(x):
